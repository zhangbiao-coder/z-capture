{"version":3,"file":"z-capture.umd.min.js","sources":["../src/core/z.capture.ts"],"sourcesContent":["import html2canvas from \"html2canvas\";\r\nimport {Option} from \"./option\";\r\n\r\n//‌保护对象属性‌：使用Symbol作为属性名可以隐藏对象的属性，使得在对象外部无法通过点语法访问这些属性，从而保护对象的私有属性‌\r\nconst selPen = Symbol(\"selPen\");\r\nconst selRect = Symbol(\"selRect\");\r\nconst clearCanvas = Symbol(\"clearCanvas\");\r\nconst closeCut = Symbol(\"closeCut\");\r\nconst saveCut = Symbol(\"saveCut\");\r\nconst intoShot = Symbol(\"intoShot\");\r\nconst drawImageMask = Symbol(\"drawImageMask\");\r\nconst drawCutImageShot = Symbol(\"drawCutImageShot\");\r\nconst drawOutShadow = Symbol(\"drawOutShadow\");\r\nconst restoreCanvasState = Symbol(\"restoreCanvasState\");\r\nconst cutHandleCanvasMouseMove = Symbol(\"cutHandleCanvasMouseMove\");\r\nconst drawFreeLine = Symbol(\"drawFreeLine\");\r\nconst cutHandleCanvasMouseUp = Symbol(\"cutHandleCanvasMouseUp\");\r\nconst drawScreenImg = Symbol(\"drawScreenImg\");\r\nconst cutHandleCanvasMouseDown = Symbol(\"cutHandleCanvasMouseDown\");\r\nconst isWithinCutShotArea = Symbol(\"isWithinCutShotArea\");\r\nconst drawFreeRect = Symbol(\"drawFreeRect\");\r\nconst rightCloseCut = Symbol(\"rightCloseCut\");\r\nconst correctionCoord = Symbol(\"correctionCoord\");\r\n\r\nconst defaultOption: Option = {\r\n    engine: 'html2canvas',\r\n    before: () => true,\r\n    start: () => void (0),\r\n    end: () => void (0),\r\n    save: (capImg: string) => {\r\n        console.log(capImg);\r\n    },\r\n    after: () => void (0),\r\n    error: (e) => {\r\n        console.error(e);\r\n    },\r\n}\r\n\r\nconst icons = {\r\n    pen: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M362.7 19.3L314.3 67.7 444.3 197.7l48.4-48.4c25-25 25-65.5 0-90.5L453.3 19.3c-25-25-65.5-25-90.5 0zm-71 71L58.6 323.5c-10.4 10.4-18 23.3-22.2 37.4L1 481.2C-1.5 489.7 .8 498.8 7 505s15.3 8.5 23.7 6.1l120.3-35.4c14.1-4.2 27-11.8 37.4-22.2L421.7 220.3 291.7 90.3z\"/></svg>',\r\n    rect: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M0 448c0 17.7 14.3 32 32 32s32-14.3 32-32l0-336c0-8.8 7.2-16 16-16l336 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L80 32C35.8 32 0 67.8 0 112L0 448zm160 0a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm192 0a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm-96 0a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm192 0a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zM416 288a32 32 0 1 0 0-64 32 32 0 1 0 0 64zm0 32a32 32 0 1 0 0 64 32 32 0 1 0 0-64zm0-128a32 32 0 1 0 0-64 32 32 0 1 0 0 64z\"/></svg>',\r\n    rect2: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M464 48l0 416L48 464 48 48l416 0zM48 0L0 0 0 48 0 464l0 48 48 0 416 0 48 0 0-48 0-416 0-48L464 0 48 0z\"/></svg>',\r\n    eraser: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M290.7 57.4L57.4 290.7c-25 25-25 65.5 0 90.5l80 80c12 12 28.3 18.7 45.3 18.7L288 480l9.4 0L512 480c17.7 0 32-14.3 32-32s-14.3-32-32-32l-124.1 0L518.6 285.3c25-25 25-65.5 0-90.5L381.3 57.4c-25-25-65.5-25-90.5 0zM297.4 416l-9.4 0-105.4 0-80-80L227.3 211.3 364.7 348.7 297.4 416z\"/></svg>',\r\n    cancel: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><path d=\"M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z\"/></svg>',\r\n    save: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>',\r\n};\r\n\r\nexport class ZCapture {\r\n    private option: Option = {};\r\n\r\n    //是否进入截图状态\r\n    private cutImageStatus = false;\r\n    //全屏截图\r\n    private cutScreenDataURL: any;\r\n    //截取后的图片\r\n    private cutShotDataURL: any;\r\n    private cutShotDataArray: Array<number> = new Array(4);\r\n\r\n    //绘制全屏canvas\r\n    private readonly captureWorkSpace: HTMLElement | undefined | null;\r\n    private readonly canvas: HTMLCanvasElement | undefined;\r\n    private readonly context: CanvasRenderingContext2D | null | undefined;\r\n\r\n    //截图操作工具栏\r\n    private readonly cutTool: HTMLElement | undefined;\r\n\r\n    /**\r\n     * 截图插件选择(默认使用：html2canvas)\r\n     * html2canvas：html转canvas方式实现截图\r\n     * mediaDevices：使用浏览器的录屏设备来实现截图\r\n     */\r\n    constructor() {\r\n        console.log(\"构建截图对象\");\r\n\r\n        this.captureWorkSpace = window.document.getElementById(\"z-capture-workspace-0726\");\r\n        let first = false;\r\n        if (!this.captureWorkSpace) {\r\n            if ((window.top as any).z_capture) {\r\n                this.captureWorkSpace = (window.top as any).z_capture.captureWorkSpace;\r\n                this.cutTool = (window.top as any).z_capture.cutTool;\r\n                window.document.body.append(this.captureWorkSpace);\r\n            } else {\r\n                this.captureWorkSpace = window.document.createElement(\"div\");\r\n                this.captureWorkSpace.setAttribute(\"id\", \"z-capture-workspace-0726\");\r\n                this.captureWorkSpace.setAttribute(\"style\", \"z-index: 99999999999; width: 100vw; height: 100vh; position: fixed; top: 0; left: 0;\");\r\n                this.captureWorkSpace.innerHTML = `<canvas class=\"screenCanvas\" style=\"height: 100%;width: 100%\"></canvas>`;\r\n                window.document.body.append(this.captureWorkSpace);\r\n\r\n                this.cutTool = window.document.createElement(\"div\");\r\n                this.cutTool.setAttribute(\"class\", \"cut-tool\");\r\n                this.cutTool.setAttribute(\"style\", \"width: fit-content;position: absolute;background-color: white;display: flex;align-items: center;justify-content: space-around;\");\r\n                this.cutTool.innerHTML = `<style> \r\n                                               #z-capture-workspace-0726 button {width: 28px; height: 25px; border: none;vertical-align: bottom;cursor:pointer;background-color: white;fill: #767676;}\r\n                                               #z-capture-workspace-0726 button:hover {background-color: #f0f0f0;fill: #2196F3;}\r\n                                               #z-capture-workspace-0726 button svg{width: 100%; height: 100%;}\r\n                                           </style>\r\n                                           <div class=\"tool-left\">\r\n                                              <button data-btnType=\"t-pen-btn\" type=\"button\" title=\"自定义-画笔\">${icons.pen}</button>\r\n                                              <button data-btnType=\"t-rect-btn\" type=\"button\" title=\"矩形-画框\">${icons.rect}</button>\r\n                                              <button data-btnType=\"t-clear-btn\" type=\"button\" title=\"清空画布\">${icons.eraser}</button>\r\n                                           </div>\r\n                                           <span class=\"tool-fg\" style=\"display: inline-block;width: 1px;border-right: 1px solid #a9a3a3;height: 18px;margin: 0 8px;\"></span>\r\n                                           <div class=\"tool-right\">\r\n                                              <button data-btnType=\"t-cancel-btn\" type=\"button\" title=\"取消\">${icons.cancel}</button>\r\n                                              <button data-btnType=\"t-save-btn\" type=\"button\" title=\"保存\">${icons.save}</button>\r\n                                           </div>`;\r\n                first = true;\r\n            }\r\n        }\r\n        this.canvas = this.captureWorkSpace.getElementsByTagName(\"canvas\")?.[0];\r\n        this.context = this.canvas?.getContext(\"2d\");\r\n        this.cutTool = this.cutTool || this.captureWorkSpace.getElementsByClassName(\"cut-tool\")?.[0] as HTMLElement;\r\n\r\n        if (first) {\r\n            //截图编辑工具区域按钮\r\n            this.cutTool.addEventListener(\"click\", (e) => {\r\n                let target = e.target as HTMLElement;\r\n                if (target.tagName !== \"BUTTON\") {\r\n                    target = target.closest(\"button\") as HTMLElement;\r\n                }\r\n                if (target) {\r\n                    const btnType = target.getAttribute(\"data-btnType\");\r\n                    switch (btnType) {\r\n                        //画笔\r\n                        case \"t-pen-btn\":\r\n                            this[selPen]();\r\n                            (this.cutTool.querySelector(\"button[data-btnType='t-rect-btn']\") as HTMLElement).style.fill = \"#767676\";\r\n                            target.style.fill = \"#3355ff\";\r\n                            break;\r\n                        //画框\r\n                        case \"t-rect-btn\":\r\n                            this[selRect]();\r\n                            (this.cutTool.querySelector(\"button[data-btnType='t-pen-btn']\") as HTMLElement).style.fill = \"#767676\";\r\n                            target.style.fill = \"#3355ff\";\r\n                            break;\r\n                        //清空\r\n                        case \"t-clear-btn\":\r\n                            this[clearCanvas]();\r\n                            break;\r\n                        //取消\r\n                        case \"t-cancel-btn\":\r\n                            this[closeCut]();\r\n                            break;\r\n                        //保存\r\n                        case \"t-save-btn\":\r\n                            this[saveCut]();\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.canvas.addEventListener(\"mousedown\", (e) => {\r\n                this[cutHandleCanvasMouseDown](e);\r\n            });\r\n            this.canvas.addEventListener(\"mousemove\", (e) => {\r\n                this[cutHandleCanvasMouseMove](e);\r\n            });\r\n            this.canvas.addEventListener(\"mouseup\", (e) => {\r\n                this[cutHandleCanvasMouseUp](e);\r\n            });\r\n            this.canvas.addEventListener(\"contextmenu\", (e) => {\r\n                this[rightCloseCut](e);\r\n            });\r\n        }\r\n        this.cutTool.remove();\r\n    }\r\n\r\n    static capture(option?: Option) {\r\n        let z_capture = (window.top as any).z_capture;\r\n        if (!z_capture) {\r\n            z_capture = new ZCapture();\r\n            (window.top as any).z_capture = z_capture;\r\n        }\r\n        return z_capture.capture(option);\r\n    }\r\n\r\n\r\n    capture(option?: Option) {\r\n        this.option = Object.assign({}, defaultOption, (option || {}));\r\n        //全屏截图前事件\r\n        const before = this.option.before();\r\n        if (!before) {\r\n            return false;\r\n        }\r\n        console.log(this.option);\r\n\r\n        if (this.option.engine === \"mediaDevices\") {\r\n            const video: any = window.document.createElement(\"video\");\r\n            const gdmOptions = {\r\n                video: true,\r\n                preferCurrentTab: true\r\n            }\r\n            const mediaDevices: any = navigator.mediaDevices;\r\n\r\n            mediaDevices.getDisplayMedia(gdmOptions).then((captureStream: MediaStream) => {\r\n                //截图开始事件\r\n                this.option.start();\r\n\r\n                video.srcObject = captureStream;\r\n                //500毫秒的延时是为了关闭录频提示框\r\n                setTimeout(() => {\r\n                    video.play().then(() => {\r\n                        if (this.canvas && this.context) {\r\n                            this.canvas.width = window.document.body.clientWidth;\r\n                            this.canvas.height = window.document.body.clientHeight;\r\n                            this.context.drawImage(video, 0, 0, this.canvas.width, this.canvas.height);\r\n                        }\r\n                        //进入截图界面，初始化状态\r\n                        this[intoShot]();\r\n                        captureStream.getTracks().forEach((track: any) => track.stop());\r\n                        video.remove();\r\n                    });\r\n                }, 500);\r\n                //用户取消共享，会抛出异常\r\n            }).catch((err: any) => {\r\n                //异常\r\n                this.option.error(err);\r\n\r\n                if (err) {\r\n                    let e = err.toString() as string;\r\n                    if (~e.indexOf(\"NotAllowedError: Permission denied\")) {\r\n                        console.warn(\"用户取消共享屏幕，截屏失败\");\r\n                    } else {\r\n                        console.error(\"Error: \" + err);\r\n                    }\r\n                }\r\n                //出现异常，关闭截图\r\n                this[closeCut]();\r\n            });\r\n        } else {\r\n            //截图开始事件\r\n            this.option.start();\r\n            html2canvas(window.document.getElementsByTagName(\"body\")[0], {\r\n                backgroundColor: 'white',\r\n                useCORS: true, //支持图片跨域\r\n                scale: 1       //设置放大倍数\r\n            }).then((canvas) => {\r\n                if (this.canvas && this.context) {\r\n                    this.canvas.width = window.document.body.clientWidth;\r\n                    this.canvas.height = window.document.body.clientHeight;\r\n                    this.context.drawImage(canvas, 0, 0, this.canvas.width, this.canvas.height);\r\n                }\r\n                //进入截图界面，初始化状态\r\n                this[intoShot]();\r\n            });\r\n        }\r\n    };\r\n\r\n    //进入截图界面，初始化状态\r\n    [intoShot]() {\r\n        this.cutImageStatus = true;\r\n\r\n        if (!window.document.getElementById(\"z-capture-workspace-0726\")) {\r\n            window.document.body.append(this.captureWorkSpace);\r\n        }\r\n\r\n        //鼠标按下状态\r\n        this.cutDown = false;\r\n        //隐藏截图工具栏状态\r\n        this.cutTool?.remove();\r\n        //待编辑保存状态\r\n        this.cutWaitStatus = false;\r\n        //图片编辑缓存状态\r\n        this.canvasState = undefined;\r\n\r\n        setTimeout(() => {\r\n            if (this.canvas) {\r\n                this.cutScreenDataURL = this.canvas.toDataURL('image/jpeg');\r\n                this[drawImageMask](0, 0, this.canvas.width, this.canvas.height, this.MASK_OPACITY);\r\n\r\n                //截图完成\r\n                this.option.end(this.cutScreenDataURL);\r\n            }\r\n        }, 50);\r\n    }\r\n\r\n    MASK_OPACITY = 0.5;\r\n\r\n    [drawImageMask](x: number, y: number, width: number, height: number, opacity: number) {\r\n        if (this.context && this.cutImageStatus) {\r\n            this.context.fillStyle = `rgba(0,0,0,${opacity})`;\r\n            this.context.fillRect(x, y, width, height);\r\n        }\r\n\r\n    }\r\n\r\n    //绘制截图区域\r\n    [drawCutImageShot](width: number, height: number, startX: number, startY: number, rectWidth: number, rectHeight: number) {\r\n        //区域外部绘制\r\n        this[drawOutShadow](startX, startY, rectWidth, rectHeight);\r\n\r\n        //区域内部绘制\r\n        if (this.context) {\r\n            this.context.globalCompositeOperation = \"destination-over\";\r\n        }\r\n        this[drawScreenImg](width, height);\r\n    }\r\n\r\n    //绘制截图区域之外的阴影部分\r\n    [drawOutShadow](startX: number, startY: number, rectWidth: number, rectHeight: number) {\r\n        //新图形只绘制与原图像不重叠的部分，重叠部分透明\r\n        if (this.context) {\r\n            this.context.globalCompositeOperation = \"destination-out\";\r\n            this.context.fillStyle = \"rgb(0,0,0)\";\r\n            this.context.fillRect(startX, startY, rectWidth, rectHeight);\r\n        }\r\n    }\r\n\r\n    //绘制全屏截图\r\n    [drawScreenImg](width: number, height: number) {\r\n        const image = new Image();\r\n        image.src = this.cutScreenDataURL;\r\n        if (this.context) {\r\n            this.context.drawImage(image, 0, 0, width, height);\r\n        }\r\n        image.remove();\r\n    }\r\n\r\n    //鼠标按下开始坐标\r\n    private cutInitPos: Array<number> = new Array<number>(2);\r\n    //鼠标按下状态\r\n    private cutDown = false;\r\n    //待编辑保存状态\r\n    private cutWaitStatus = false;\r\n    //当前鼠标滑动状态 cut,line,rect\r\n    private cutMouseState = \"\";\r\n    //画布状态\r\n    private canvasState: undefined | ImageData;\r\n\r\n    //恢复画布状态\r\n    [restoreCanvasState]() {\r\n        if (this.canvasState && this.context) {\r\n            this.context.putImageData(this.canvasState, this.cutShotDataArray[0], this.cutShotDataArray[1]);\r\n        }\r\n    }\r\n\r\n    //校正坐标\r\n    [correctionCoord](old_x: number, old_y: number) {\r\n        // 获取 Canvas 元素的实际位置\r\n        const rect = this.canvas.getBoundingClientRect();\r\n\r\n        // 计算事件相对于 Canvas 的坐标\r\n        const scaleX = this.canvas.width / rect.width;\r\n        const scaleY = this.canvas.height / rect.height;\r\n\r\n        // 获取正确的绘制坐标\r\n        const x = (old_x - rect.left) * scaleX;\r\n        const y = (old_y - rect.top) * scaleY;\r\n        return [x, y];\r\n    }\r\n\r\n    //鼠标按下开始\r\n    [cutHandleCanvasMouseDown](event: MouseEvent) {\r\n        let [x, y] = this[correctionCoord](event.clientX, event.clientY);\r\n        //开始截图\r\n        if (!this.cutWaitStatus && this.cutImageStatus) {\r\n            this.cutInitPos = [x, y];\r\n            this.cutDown = true;\r\n            this.cutMouseState = \"cut\";\r\n        }\r\n\r\n        //编辑截图\r\n        if (this.canvas && this.context && this.cutWaitStatus && this[isWithinCutShotArea](x, y)) {\r\n            this.cutInitPos = [x, y];\r\n            this.cutDown = true;\r\n            //保存画布状态\r\n            let [sx, sy, sw, sh] = this.cutShotDataArray;\r\n            this.canvasState = this.context.getImageData(sx, sy, sw, sh);\r\n\r\n            //开始划线\r\n            if (this.cutEditStatus) {\r\n                // 开始绘制路径\r\n                this.cutMouseState = \"line\";\r\n                this.context.beginPath();\r\n                this.context.moveTo(x - this.canvas.offsetLeft, y - this.canvas.offsetTop);\r\n            }\r\n\r\n            //开始画框\r\n            if (this.cutRectStatus) {\r\n                this.cutMouseState = \"rect\";\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //鼠标滑动进行\r\n    [cutHandleCanvasMouseMove](event: MouseEvent) {\r\n        let [x, y] = this[correctionCoord](event.clientX, event.clientY);\r\n        if (this.cutDown && this.canvas && this.context) {\r\n            const endX = x;\r\n            const endY = y;\r\n            const [startX, startY] = this.cutInitPos;\r\n            const rectWidth = endX - startX;\r\n            const rectHeight = endY - startY;\r\n            const {width, height} = this.canvas;\r\n\r\n\r\n            switch (this.cutMouseState) {\r\n                //截图中\r\n                case \"cut\":\r\n                    //清空画布\r\n                    this.context.clearRect(0, 0, width, height);\r\n                    this.cutShotDataArray = [startX, startY, rectWidth, rectHeight];\r\n                    this[drawImageMask](0, 0, width, height, this.MASK_OPACITY);\r\n                    //绘制矩形截图\r\n                    this[drawCutImageShot](width, height, startX, startY, rectWidth, rectHeight);\r\n                    break;\r\n\r\n                //划线中\r\n                case \"line\":\r\n                    if (this[isWithinCutShotArea](endX, endY)) {\r\n                        this[drawFreeLine](x - this.canvas.offsetLeft, y - this.canvas.offsetTop);\r\n                    }\r\n\r\n                    break;\r\n\r\n                //画框中\r\n                case \"rect\":\r\n                    if (this[isWithinCutShotArea](endX, endY)) {\r\n                        this[drawFreeRect](startX, startY, rectWidth, rectHeight);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    [drawFreeLine](endX: number, endY: number) {\r\n        //恢复状态\r\n        this[restoreCanvasState]();\r\n        //新图形覆盖在原图像之上\r\n        if (this.context) {\r\n            this.context.globalCompositeOperation = \"source-over\";\r\n            this.context.strokeStyle = \"red\";\r\n            this.context.lineWidth = 2;\r\n            this.context.lineTo(endX, endY);\r\n            this.context.stroke();\r\n        }\r\n    }\r\n\r\n    [drawFreeRect](startX: number, startY: number, rectWidth: number, rectHeight: number) {\r\n        //恢复状态\r\n        this[restoreCanvasState]();\r\n        //新图形覆盖在原图像之上\r\n        if (this.context) {\r\n            this.context.globalCompositeOperation = \"source-over\";\r\n            this.context.beginPath();\r\n            this.context.strokeStyle = \"red\";\r\n            this.context.lineWidth = 2;\r\n            this.context.rect(startX, startY, rectWidth, rectHeight);\r\n            this.context.stroke();\r\n        }\r\n\r\n    }\r\n\r\n    //监测坐标是否在截图区域内\r\n    [isWithinCutShotArea](x: number, y: number) {\r\n        return x >= this.cutShotDataArray[0] &&\r\n            x <= this.cutShotDataArray[0] + this.cutShotDataArray[2] &&\r\n            y >= this.cutShotDataArray[1] &&\r\n            y <= this.cutShotDataArray[1] + this.cutShotDataArray[3];\r\n    }\r\n\r\n    //鼠标抬起完成\r\n    [cutHandleCanvasMouseUp](event: MouseEvent) {\r\n        if (this.cutDown && this.context) {\r\n            switch (this.cutMouseState) {\r\n                //截图结束\r\n                case \"cut\":\r\n                    this.cutDown = false;\r\n                    this.cutWaitStatus = true;\r\n                    if (this.captureWorkSpace && this.cutTool) {\r\n                        this.captureWorkSpace.appendChild(this.cutTool);\r\n                        this.cutTool.style.left = (event.clientX - this.cutTool.clientWidth) + \"px\";\r\n                        this.cutTool.style.top = event.clientY + \"px\";\r\n                    }\r\n                    this.cutMouseState = \"\";\r\n                    break;\r\n                //结束划线\r\n                case \"line\":\r\n                    this.context.closePath();\r\n                    this.cutMouseState = \"\";\r\n                    this.cutDown = false;\r\n                    break;\r\n                //结束画框\r\n                case \"rect\":\r\n                    this.context.closePath();\r\n                    this.cutMouseState = \"\";\r\n                    this.cutDown = false;\r\n                    break;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    //右键关闭\r\n    [rightCloseCut](event: Event) {\r\n        event.preventDefault();\r\n        this[closeCut]();\r\n    }\r\n\r\n    //关闭截图\r\n    [closeCut]() {\r\n        this.cutImageStatus = false;\r\n        this.cutWaitStatus = false;\r\n        console.log(\"截图关闭..\")\r\n        this.captureWorkSpace.remove();\r\n        //截图之后事件\r\n        this.option.after();\r\n    }\r\n\r\n    //启用画笔编辑\r\n    cutEditStatus = false;\r\n\r\n    [selPen]() {\r\n        if (this.cutWaitStatus) {\r\n            this.cutEditStatus = true;\r\n            this.cutRectStatus = false;\r\n        }\r\n\r\n    }\r\n\r\n    //启用画框编辑\r\n    cutRectStatus = false;\r\n\r\n    [selRect]() {\r\n        if (this.cutWaitStatus) {\r\n            this.cutRectStatus = true;\r\n            this.cutEditStatus = false;\r\n        }\r\n    }\r\n\r\n    [clearCanvas]() {\r\n        if (this.canvas && this.context) {\r\n            //清空选中区域画布\r\n            const [x, y, w, h] = this.cutShotDataArray;\r\n            this.context.clearRect(x, y, w, h);\r\n\r\n            const {width, height} = this.canvas;\r\n            this.canvasState = undefined;\r\n            //绘制矩形截图背景\r\n            this[drawCutImageShot](width, height, this.cutShotDataArray[0], this.cutShotDataArray[1], this.cutShotDataArray[2], this.cutShotDataArray[3]);\r\n        }\r\n\r\n    }\r\n\r\n    //保存截图\r\n    [saveCut]() {\r\n        if (this.canvas && this.context) {\r\n            const [x, y, w, h] = this.cutShotDataArray;\r\n            const data = this.context.getImageData(x, y, w, h);\r\n\r\n            const shotCanvas = window.document.createElement(\"canvas\");\r\n            const shotContext = shotCanvas.getContext(\"2d\");\r\n\r\n            if (shotContext != null) {\r\n                shotCanvas.width = data.width;\r\n                shotCanvas.height = data.height;\r\n                shotContext.putImageData(data, 0, 0);\r\n                //jpeg格式，数据更小\r\n                this.cutShotDataURL = shotCanvas.toDataURL('image/jpeg');\r\n                console.log(this.option);\r\n                this.option.error(\"test-error\");\r\n                //确定保存截图\r\n                this.option.save(this.cutShotDataURL);\r\n            }\r\n            shotCanvas.remove();\r\n            this[closeCut]();\r\n        }\r\n    };\r\n}"],"names":["selPen","Symbol","selRect","clearCanvas","closeCut","saveCut","intoShot","drawImageMask","drawCutImageShot","drawOutShadow","restoreCanvasState","cutHandleCanvasMouseMove","drawFreeLine","cutHandleCanvasMouseUp","drawScreenImg","cutHandleCanvasMouseDown","isWithinCutShotArea","drawFreeRect","rightCloseCut","correctionCoord","defaultOption","engine","before","start","end","save","capImg","console","log","after","error","e","icons","ZCapture","_this","this","option","cutImageStatus","cutShotDataArray","Array","MASK_OPACITY","cutInitPos","cutDown","cutWaitStatus","cutMouseState","cutEditStatus","cutRectStatus","captureWorkSpace","window","document","getElementById","first","top","z_capture","cutTool","body","append","createElement","setAttribute","innerHTML","concat","canvas","_a","getElementsByTagName","context","_b","getContext","getElementsByClassName","addEventListener","target","tagName","closest","getAttribute","querySelector","style","fill","remove","capture","prototype","Object","assign","video_1","navigator","mediaDevices","getDisplayMedia","video","preferCurrentTab","then","captureStream","srcObject","setTimeout","play","width","clientWidth","height","clientHeight","drawImage","getTracks","forEach","track","stop","catch","err","toString","indexOf","warn","html2canvas","backgroundColor","useCORS","scale","canvasState","undefined","cutScreenDataURL","toDataURL","x","y","opacity","fillStyle","fillRect","startX","startY","rectWidth","rectHeight","globalCompositeOperation","image","Image","src","putImageData","old_x","old_y","rect","getBoundingClientRect","scaleX","scaleY","left","event","clientX","clientY","sx","sy","sw","sh","getImageData","beginPath","moveTo","offsetLeft","offsetTop","endX","endY","_c","clearRect","strokeStyle","lineWidth","lineTo","stroke","appendChild","closePath","preventDefault","w","h","data","shotCanvas","shotContext","cutShotDataURL"],"mappings":"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"}